version: '3.2'

#================================================================================================
# NETWORK SETUP
#================================================================================================
networks:
  backend:
    driver: ${NETWORKS_DRIVER:-bridge}

#================================================================================================
# VOLUME SETUP
#================================================================================================
volumes:
  prometheus:
    driver: ${VOLUMES_DRIVER:-local}
  grafana:
    driver: ${VOLUMES_DRIVER:-local}


services:
#================================================================================================
# ALERTMANAGER
#================================================================================================
  alertmanager:
    restart: unless-stopped
    image: prom/alertmanager:v${ALERTMANAGER_VERSION:-0.14.0}
    container_name: dockerframework_alertmanager
    volumes:
      - ./data/alertmanager/:/etc/alertmanager/
    command:
      - '--config.file=/etc/alertmanager/config.yml'
      - '--storage.path=/alertmanager'
    ports:
      - "9093:9093"
    networks:
      - backend
    labels:
      org.label-schema.group: "monitoring"

#================================================================================================
# CADDY
#================================================================================================
  caddy:
    restart: unless-stopped
    image: stefanprodan/caddy
    container_name: dockerframework_caddy
    ports:
      - "3000:3000"
      - "9090:9090"
      - "9093:9093"
      - "9091:9091"
    volumes:
      - ./data/caddy/:/etc/caddy/
    environment:
      - ADMIN_USER=${ADMIN_USER:-laradock}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD:-password}
    networks:
      - backend
    labels:
      org.label-schema.group: "monitoring"

#================================================================================================
# CADVISOR
#================================================================================================
  cadvisor:
    restart: unless-stopped
    image: google/cadvisor:v${CADVISOR_VERSION:-0.28.3}
    container_name: dockerframework_cadvisor
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /cgroup:/cgroup:ro #doesn't work on MacOS only for Linux
    ports:
      - "8080:8080"
    networks:
      - backend
    labels:
      org.label-schema.group: "monitoring"

#================================================================================================
# GRAFANA
#================================================================================================
  grafana:
    restart: unless-stopped
    image: dockerframework/grafana:${GRAFANA_VERSION:-5.1.3}
    container_name: dockerframework_grafana
    ports:
      - "3000:3000"
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ./data/grafana:/var/lib/grafana
    environment:
      - GRAFANA_VERSION=${GRAFANA_VERSION:-5.1.3}
      - GF_SERVER_ROOT_URL=${GF_SERVER_ROOT_URL}
      - GF_SECURITY_ADMIN_USER=${GF_SECURITY_ADMIN_USER:-laradock}
      - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD:-password}
      - GF_INSTALL_PLUGINS=${GF_INSTALL_PLUGINS:-alexanderzobnin-zabbix-app,cloudflare-app,crate-datasource,digiapulssi-breadcrumb-panel,grafana-azure-monitor-datasource,grafana-clock-panel,grafana-simple-json-datasource,grafana-kubernetes-app,grafana-worldmap-panel,percona-percona-app,raintank-worldping-app}
      - GF_AWS_PROFILES=${GF_AWS_PROFILES}
      - GF_AWS_default_ACCESS_KEY_ID=${GF_AWS_default_ACCESS_KEY_ID}
      - GF_AWS_default_SECRET_ACCESS_KEY=${GF_AWS_default_SECRET_ACCESS_KEY}
      - GF_AWS_default_REGION=${GF_AWS_default_REGION}
    networks:
      - backend
    labels:
      org.label-schema.group: "monitoring"

#================================================================================================
# NODEEXPORTER
#================================================================================================
  nodeexporter:
    image: prom/node-exporter:v${NODEEXPORTER_VERSION:-0.15.2}
    container_name: dockerframework_nodeexporter
    user: root
    privileged: true
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)'
    restart: unless-stopped
    ports:
      - "9100:9100"
    networks:
      - backend
    labels:
      org.label-schema.group: "monitoring"

#================================================================================================
# PORTAINER
#================================================================================================
  portainer:
    restart: unless-stopped
    image: dockerframework/portainer:${PORTAINER_VERSION:-1.16.5}
    container_name: dockerframework_portainer
    ports:
      - "8118:9000"
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /var/run/docker.sock:/var/run/docker.sock
      - ./data/portainer:/data
    environment:
      - PORTAINER_VERSION=${PORTAINER_VERSION:-1.16.5}
    networks:
      - backend
    labels:
      org.label-schema.group: "monitoring"

#================================================================================================
# PROMETHEUS
#================================================================================================
  prometheus:
    restart: unless-stopped
    image: prom/prometheus:v${PROMETHEUS_VERSION:-2.3.0}
    container_name: dockerframework_prometheus
    volumes:
      - ./config/prometheus/alert.rules:/etc/prometheus/alert.rules
      - ./config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./data/prometheus:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention=200h'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    networks:
      - backend
    labels:
      org.label-schema.group: "monitoring"

#================================================================================================
# PUSHGATEWAY
#================================================================================================
  pushgateway:
    restart: unless-stopped
    image: prom/pushgateway
    container_name: dockerframework_pushgateway
    ports:
      - "9091:9091"
    networks:
      - backend
    labels:
      org.label-schema.group: "monitoring"
